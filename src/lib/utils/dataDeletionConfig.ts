// „Éá„Éº„ÇøÂâäÈô§„Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö„Å®ÂàùÊúüÂåñ
// Ë£ΩÈÄ†Ê•≠ÂãôÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†ÔºàUnicaÔºâÂ∞ÇÁî®Ë®≠ÂÆö

import { integratedArchiveSystem, initializeIntegratedSystem } from './integratedArchiveSystem';
import { dataDeletionManager } from './dataDeletionManager';
import { deletionExportManager } from './deletionExportManager';

// =============================================================================
// Ë®≠ÂÆöÂÆöÊï∞
// =============================================================================

export const DELETION_CONFIG = {
  // „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö
  SYSTEM: {
    ENABLED: process.env.NODE_ENV !== 'development', // Êú¨Áï™Áí∞Â¢É„Åß„ÅÆ„ÅøÊúâÂäπ
    DEBUG_MODE: process.env.DELETION_DEBUG === 'true',
    DRY_RUN: process.env.DELETION_DRY_RUN === 'true',
  },

  // „Çπ„Ç±„Ç∏„É•„Éº„É´Ë®≠ÂÆö
  SCHEDULE: {
    DAILY_DELETION: '0 2 * * *', // ÊØéÊó•ÂçàÂâç2ÊôÇ
    WEEKLY_MAINTENANCE: '0 3 * * 0', // ÊØéÈÄ±Êó•ÊõúÊó•ÂçàÂâç3ÊôÇ
    TIMEZONE: 'Asia/Tokyo'
  },

  // „Éê„ÉÉ„ÉÅÂá¶ÁêÜÂà∂Èôê
  BATCH: {
    MAX_RECORDS_PER_BATCH: 500,
    MAX_CONCURRENT_OPERATIONS: 5,
    RETRY_ATTEMPTS: 3,
    RETRY_DELAY: 5000 // 5Áßí
  },

  // ÈÄöÁü•Ë®≠ÂÆö
  NOTIFICATIONS: {
    EMAIL_ENABLED: false, // ÁèæÂú®„ÅØÁÑ°ÂäπÔºàÂ∞ÜÊù•ÂÆüË£Ö‰∫àÂÆöÔºâ
    DASHBOARD_ENABLED: true,
    BROWSER_ENABLED: true,
    SLACK_ENABLED: false // Â∞ÜÊù•ÂÆüË£Ö‰∫àÂÆö
  },

  // „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö
  SECURITY: {
    REQUIRE_ADMIN_APPROVAL: true,
    LOG_ALL_OPERATIONS: true,
    AUDIT_TRAIL_ENABLED: true,
    BACKUP_BEFORE_DELETE: true
  }
} as const;

// =============================================================================
// Áí∞Â¢ÉÂà•Ë®≠ÂÆö
// =============================================================================

export const getEnvironmentConfig = () => {
  const env = process.env.NODE_ENV;

  switch (env) {
    case 'development':
      return {
        ...DELETION_CONFIG,
        SYSTEM: {
          ...DELETION_CONFIG.SYSTEM,
          ENABLED: false, // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØÁÑ°Âäπ
          DEBUG_MODE: true,
          DRY_RUN: true
        },
        BATCH: {
          ...DELETION_CONFIG.BATCH,
          MAX_RECORDS_PER_BATCH: 10 // ÈñãÁô∫ÊôÇ„ÅØÂ∞ë„Å™„Åè
        }
      };

    case 'staging':
      return {
        ...DELETION_CONFIG,
        SYSTEM: {
          ...DELETION_CONFIG.SYSTEM,
          ENABLED: true,
          DEBUG_MODE: true,
          DRY_RUN: false
        },
        BATCH: {
          ...DELETION_CONFIG.BATCH,
          MAX_RECORDS_PER_BATCH: 100 // „Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞„ÅØ‰∏≠Á®ãÂ∫¶
        }
      };

    case 'production':
    default:
      return DELETION_CONFIG;
  }
};

// =============================================================================
// ÂàùÊúüÂåñÈñ¢Êï∞
// =============================================================================

export const initializeDataDeletionSystem = async (): Promise<{
  success: boolean;
  message: string;
  config: any;
}> => {
  const config = getEnvironmentConfig();

  console.log('üöÄ „Éá„Éº„ÇøÂâäÈô§„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÈñãÂßã');
  console.log(`   üìç Áí∞Â¢É: ${process.env.NODE_ENV}`);
  console.log(`   üîß ÊúâÂäπ: ${config.SYSTEM.ENABLED}`);
  console.log(`   üß™ „Éá„Éê„ÉÉ„Ç∞: ${config.SYSTEM.DEBUG_MODE}`);
  console.log(`   üîí „Éâ„É©„Ç§„É©„É≥: ${config.SYSTEM.DRY_RUN}`);

  try {
    if (!config.SYSTEM.ENABLED) {
      return {
        success: true,
        message: 'ÈñãÁô∫Áí∞Â¢É„ÅÆ„Åü„ÇÅÂâäÈô§„Ç∑„Çπ„ÉÜ„É†„ÅØÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô',
        config
      };
    }

    // Áµ±Âêà„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
    await initializeIntegratedSystem();

    // ÂàùÊúüÁä∂Ê≥ÅÁ¢∫Ë™ç
    const overview = await integratedArchiveSystem.getSystemOverview();

    console.log('üìä ÂàùÊúü„Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥Å:');
    console.log(`   ‚ö†Ô∏è Ë≠¶Âëä: ${overview.summary.totalWarnings}‰ª∂`);
    console.log(`   üóëÔ∏è ÂâäÈô§‰∫àÂÆö: ${overview.summary.pendingDeletions}‰ª∂`);
    console.log(`   üì§ „Ç®„ÇØ„Çπ„Éù„Éº„ÉàË¶ÅÊ±Ç: ${overview.summary.exportRequests}‰ª∂`);
    console.log(`   üíö ÂÅ•Â∫∑Â∫¶: ${overview.summary.healthScore}/100`);

    return {
      success: true,
      message: '„Éá„Éº„ÇøÂâäÈô§„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü',
      config: {
        ...config,
        overview: overview.summary
      }
    };

  } catch (error) {
    console.error('‚ùå „Éá„Éº„ÇøÂâäÈô§„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
    return {
      success: false,
      message: `ÂàùÊúüÂåñ„Ç®„É©„Éº: ${error instanceof Error ? error.message : '‰∏çÊòé„Å™„Ç®„É©„Éº'}`,
      config
    };
  }
};

// =============================================================================
// ÁÆ°ÁêÜÁî®„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
// =============================================================================

export const getDeletionSystemStatus = async () => {
  const config = getEnvironmentConfig();

  if (!config.SYSTEM.ENABLED) {
    return {
      enabled: false,
      reason: 'Áí∞Â¢ÉË®≠ÂÆö„Å´„Çà„ÇäÁÑ°ÂäπÂåñ',
      config: config.SYSTEM
    };
  }

  try {
    const overview = await integratedArchiveSystem.getSystemOverview();
    const statistics = await dataDeletionManager.getDeletionStatistics();

    return {
      enabled: true,
      systemHealth: overview.systemHealth.overallHealth,
      summary: overview.summary,
      statistics,
      lastUpdate: new Date().toISOString(),
      config: config.SYSTEM
    };

  } catch (error) {
    return {
      enabled: true,
      error: error instanceof Error ? error.message : '‰∏çÊòé„Å™„Ç®„É©„Éº',
      config: config.SYSTEM
    };
  }
};

export const executeManualMaintenance = async (taskType: 'all' | 'warnings' | 'deletion' | 'export' = 'all') => {
  const config = getEnvironmentConfig();

  console.log(`üîß ÊâãÂãï„É°„É≥„ÉÜ„Éä„É≥„ÇπÂÆüË°å: ${taskType}`);

  if (!config.SYSTEM.ENABLED && !config.SYSTEM.DEBUG_MODE) {
    throw new Error('„Ç∑„Çπ„ÉÜ„É†„ÅåÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
  }

  try {
    switch (taskType) {
      case 'warnings':
        // Ë≠¶Âëä„ÅÆ„ÅøÁîüÊàê
        const warnings = await integratedArchiveSystem.executeIntegratedMaintenance();
        return warnings;

      case 'deletion':
        // ÂâäÈô§„ÅÆ„ÅøÂÆüË°å
        if (config.SYSTEM.DRY_RUN) {
          console.log('üß™ „Éâ„É©„Ç§„É©„É≥: ÂÆüÈöõ„ÅÆÂâäÈô§„ÅØÂÆüË°å„Åï„Çå„Åæ„Åõ„Çì');
        }
        const deletionResults = await dataDeletionManager.runScheduledDeletion();
        return deletionResults;

      case 'export':
        // „Ç®„ÇØ„Çπ„Éù„Éº„Éà„ÅÆ„ÅøÂÆüË°å
        const exportRequests = await deletionExportManager.getExportRequests();
        const pendingExports = exportRequests.filter(r => r.status === 'pending');

        const exportResults = [];
        for (const request of pendingExports) {
          const result = await deletionExportManager.executeExport(request);
          exportResults.push(result);
        }
        return { exportResults };

      case 'all':
      default:
        // ÂÖ®„É°„É≥„ÉÜ„Éä„É≥„ÇπÂÆüË°å
        const allResults = await integratedArchiveSystem.executeIntegratedMaintenance();
        return allResults;
    }

  } catch (error) {
    console.error(`‚ùå ÊâãÂãï„É°„É≥„ÉÜ„Éä„É≥„Çπ„Ç®„É©„Éº (${taskType}):`, error);
    throw error;
  }
};

// =============================================================================
// „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
// =============================================================================

export const performHealthCheck = async () => {
  try {
    const config = getEnvironmentConfig();
    const overview = await integratedArchiveSystem.getSystemOverview();

    const healthCheck = {
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV,
      systemEnabled: config.SYSTEM.ENABLED,
      overallHealth: overview.systemHealth.overallHealth,
      healthScore: overview.summary.healthScore,
      components: {
        warnings: overview.systemHealth.components.warnings,
        deletion: overview.systemHealth.components.deletion,
        export: overview.systemHealth.components.export
      },
      statistics: overview.summary,
      issues: overview.systemHealth.issues,
      recommendations: overview.systemHealth.recommendations
    };

    return healthCheck;

  } catch (error) {
    return {
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV,
      overallHealth: 'critical',
      error: error instanceof Error ? error.message : '‰∏çÊòé„Å™„Ç®„É©„Éº'
    };
  }
};

export default {
  DELETION_CONFIG,
  getEnvironmentConfig,
  initializeDataDeletionSystem,
  getDeletionSystemStatus,
  executeManualMaintenance,
  performHealthCheck
};