/**
 * Firestore„ÅÆÂ£ä„Çå„Åü„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„Çí‰øÆÊ≠£„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
 *
 * ÂÆüË°åÊñπÊ≥ï:
 * npx ts-node scripts/fix-timestamps.ts
 */

import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, updateDoc, doc, Timestamp } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function fixTimestamps() {
  console.log('üîß „Çø„Ç§„É†„Çπ„Çø„É≥„Éó‰øÆÊ≠£„ÇíÈñãÂßã„Åó„Åæ„Åô...');

  const messagesRef = collection(db, 'chat_messages');
  const snapshot = await getDocs(messagesRef);

  let fixedCount = 0;
  let brokenCount = 0;

  for (const docSnapshot of snapshot.docs) {
    const data = docSnapshot.data();
    const timestamp = data.timestamp;

    // serverTimestamp„ÅÆ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº„ÇíÊ§úÂá∫
    if (timestamp && timestamp._methodName === 'serverTimestamp') {
      brokenCount++;
      console.log(`‚ö†Ô∏è Â£ä„Çå„Åü„É°„ÉÉ„Çª„Éº„Ç∏: ${docSnapshot.id} - ${data.content?.substring(0, 20)}`);

      // ÁèæÂú®ÊôÇÂàª„Åß‰øÆÊ≠£ÔºàÊú¨Êù•„ÅÆ„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÅØÂ§±„Çè„Çå„ÇãÔºâ
      const now = Timestamp.fromDate(new Date());
      await updateDoc(doc(db, 'chat_messages', docSnapshot.id), {
        timestamp: now,
      });

      fixedCount++;
      console.log(`‚úÖ ‰øÆÊ≠£ÂÆå‰∫Ü: ${docSnapshot.id}`);
    }
  }

  console.log(`\nüìä ÁµêÊûú:`);
  console.log(`- Â£ä„Çå„Åü„É°„ÉÉ„Çª„Éº„Ç∏: ${brokenCount}‰ª∂`);
  console.log(`- ‰øÆÊ≠£„Åó„Åü„É°„ÉÉ„Çª„Éº„Ç∏: ${fixedCount}‰ª∂`);
  console.log(`- ÂÖ®‰Ωì: ${snapshot.size}‰ª∂`);
}

fixTimestamps()
  .then(() => {
    console.log('‚úÖ ÂÆå‰∫Ü');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå „Ç®„É©„Éº:', error);
    process.exit(1);
  });
