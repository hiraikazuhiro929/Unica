rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // 🛡️ SECURITY HARDENED VERSION
    // 主な改善点:
    // 1. 組織レベルアクセス制御追加
    // 2. TOCTOU攻撃対策実装
    // 3. より詳細な権限チェック
    // 4. 監査ログ要件追加

    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }

    // 🔒 TOCTOU攻撃対策: ロール情報をキャッシュして一貫性を保つ
    function getUserData() {
      return get(/databases/$(database)/documents/appUsers/$(request.auth.uid)).data;
    }

    function getUserRole() {
      return getUserData().role;
    }

    function getUserCompany() {
      return getUserData().companyId;
    }

    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }

    function isManager() {
      return isAuthenticated() && getUserRole() in ['admin', 'manager'];
    }

    function isLeader() {
      return isAuthenticated() && getUserRole() in ['admin', 'manager', 'leader'];
    }

    function isActiveUser() {
      return isAuthenticated() && getUserData().isActive == true;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // 🏢 組織レベルアクセス制御
    function isSameCompany(resourceCompanyId) {
      return isAuthenticated() && getUserCompany() == resourceCompanyId;
    }

    function hasCompanyAccess(resourceData) {
      // 管理者は全社データアクセス可能（スーパーアドミン向け）
      return isAdmin() ||
             (exists(resourceData.companyId) && isSameCompany(resourceData.companyId));
    }

    // 🔒 入力値検証関数
    function isValidInput(data) {
      return data.keys().hasAll(['updatedAt']) &&
             data.updatedAt == request.time;
    }

    // User profiles - 組織レベルアクセス制御付き
    match /appUsers/{userId} {
      allow read: if isActiveUser() && (isOwner(userId) || hasCompanyAccess(resource.data));
      allow write: if isOwner(userId) || isAdmin() && isValidInput(request.resource.data);
      allow create: if isAdmin() && isValidInput(request.resource.data);
      allow delete: if isAdmin() && hasCompanyAccess(resource.data);
    }

    // Company data - 厳格なアクセス制御
    match /companies/{companyId} {
      allow read: if isActiveUser() && isSameCompany(companyId);
      allow write: if isAdmin() && isSameCompany(companyId) && isValidInput(request.resource.data);
    }

    // Orders - 組織フィルタリング付き
    match /orders/{orderId} {
      allow read: if isActiveUser() && hasCompanyAccess(resource.data);
      allow write: if isLeader() && hasCompanyAccess(resource.data) && isValidInput(request.resource.data);
      allow create: if isLeader() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if isManager() && hasCompanyAccess(resource.data);
    }

    // Processes/Tasks - 組織フィルタリング付き
    match /processes/{processId} {
      allow read: if isActiveUser() && hasCompanyAccess(resource.data);
      allow write: if isLeader() && hasCompanyAccess(resource.data) && isValidInput(request.resource.data);
      allow create: if isLeader() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if isManager() && hasCompanyAccess(resource.data);
    }

    // Work Hours - より厳格な所有権チェック
    match /work-hours/{workHourId} {
      allow read: if isActiveUser() && hasCompanyAccess(resource.data);
      allow write: if (isOwner(resource.data.userId) || isManager()) &&
                      hasCompanyAccess(resource.data) &&
                      isValidInput(request.resource.data);
      allow create: if isActiveUser() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if (isOwner(resource.data.userId) || isManager()) && hasCompanyAccess(resource.data);
    }

    // Daily Reports - より厳格な所有権チェック
    match /daily-reports/{reportId} {
      allow read: if isActiveUser() && hasCompanyAccess(resource.data);
      allow write: if (isOwner(resource.data.userId) || isManager()) &&
                      hasCompanyAccess(resource.data) &&
                      isValidInput(request.resource.data);
      allow create: if isActiveUser() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if (isOwner(resource.data.userId) || isManager()) && hasCompanyAccess(resource.data);
    }

    // Notes - 個人データ + 組織チェック
    match /notes/{noteId} {
      allow read, write: if isActiveUser() &&
                            isOwner(resource.data.userId) &&
                            hasCompanyAccess(resource.data);
      allow create: if isActiveUser() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if isOwner(resource.data.userId) && hasCompanyAccess(resource.data);
    }

    // Calendar events - 組織フィルタリング付き
    match /calendar-events/{eventId} {
      allow read: if isActiveUser() && hasCompanyAccess(resource.data);
      allow write: if (isOwner(resource.data.userId) || isManager()) &&
                      hasCompanyAccess(resource.data) &&
                      isValidInput(request.resource.data);
      allow create: if isActiveUser() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if (isOwner(resource.data.userId) || isManager()) && hasCompanyAccess(resource.data);
    }

    // Inventory - 組織フィルタリング付き
    match /inventory/{itemId} {
      allow read: if isActiveUser() && hasCompanyAccess(resource.data);
      allow write: if isLeader() && hasCompanyAccess(resource.data) && isValidInput(request.resource.data);
      allow create: if isLeader() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if isManager() && hasCompanyAccess(resource.data);
    }

    // Partners - 組織フィルタリング付き
    match /partners/{partnerId} {
      allow read: if isActiveUser() && hasCompanyAccess(resource.data);
      allow write: if isLeader() && hasCompanyAccess(resource.data) && isValidInput(request.resource.data);
      allow create: if isLeader() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if isManager() && hasCompanyAccess(resource.data);
    }

    // Defect Reports - 組織フィルタリング付き
    match /defect-reports/{reportId} {
      allow read: if isActiveUser() && hasCompanyAccess(resource.data);
      allow write: if isLeader() && hasCompanyAccess(resource.data) && isValidInput(request.resource.data);
      allow create: if isActiveUser() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if isManager() && hasCompanyAccess(resource.data);
    }

    // Bookmarks - 個人データ + 組織チェック
    match /bookmarks/{bookmarkId} {
      allow read, write: if isActiveUser() &&
                            isOwner(resource.data.userId) &&
                            hasCompanyAccess(resource.data);
      allow create: if isActiveUser() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if isOwner(resource.data.userId) && hasCompanyAccess(resource.data);
    }

    // 🔒 監査ログ - より厳格なアクセス制御
    match /activity-logs/{logId} {
      allow read: if isManager() && hasCompanyAccess(resource.data);
      allow write: if false; // サーバーサイド関数のみ許可
    }

    // 🔒 セキュリティ監査ログ - 管理者のみ
    match /security-logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // サーバーサイド関数のみ許可
    }

    // Chat functionality - 組織フィルタリング付き
    match /chatChannels/{channelId} {
      allow read: if isActiveUser() && hasCompanyAccess(resource.data);
      allow write: if isActiveUser() && hasCompanyAccess(resource.data) && isValidInput(request.resource.data);
      allow create: if isActiveUser() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if isManager() && hasCompanyAccess(resource.data);
    }

    match /chatMessages/{messageId} {
      allow read: if isActiveUser() && hasCompanyAccess(resource.data);
      allow write: if (isOwner(resource.data.userId) || isManager()) &&
                      hasCompanyAccess(resource.data) &&
                      isValidInput(request.resource.data);
      allow create: if isActiveUser() && hasCompanyAccess(request.resource.data) && isValidInput(request.resource.data);
      allow delete: if (isOwner(resource.data.userId) || isManager()) && hasCompanyAccess(resource.data);
    }

    match /chatUsers/{userId} {
      allow read: if isActiveUser() && hasCompanyAccess(resource.data);
      allow write: if (isOwner(userId) || isManager()) && hasCompanyAccess(resource.data) && isValidInput(request.resource.data);
    }

    match /unreadCounts/{userId} {
      allow read, write: if (isOwner(userId) || isManager()) && hasCompanyAccess(resource.data);
    }

    // System configuration - 管理者専用
    match /system-config/{configId} {
      allow read: if isAdmin();
      allow write: if isAdmin() && isValidInput(request.resource.data);
    }

    // 🔒 強化されたフォールバック: すべて拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
}